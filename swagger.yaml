openapi: 3.0.0
info:
  title: Agent API
  version: 1.0.0
  description: API specification for the Agent service
servers:
  - url: http://localhost:8080/api
paths:
  /addnetwork:
    post:
      summary: Add a new network
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '500':
          description: Internal server error

  /networks:
    get:
      summary: Get all networks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Network'
        '500':
          description: Internal server error

  /network/{name}:
    get:
      summary: Get a network by name
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Network name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        '404':
          description: Network not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a network by name
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Network name
      responses:
        '200':
          description: OK
        '404':
          description: Network not found
        '500':
          description: Internal server error

  /script:
    post:
      summary: Add a new script
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Script'
      responses:
        '200':
          description: Script saved successfully
        '400':
          description: Invalid request
        '500':
          description: Failed to save script

  /healthcheck:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK

  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '500':
          description: Internal server error

  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: JWT token
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /query:
    get:
      summary: Proxy InfluxDB query
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: InfluxDB query
      responses:
        '200':
          description: OK
        '500':
          description: Internal server error
        '502':
          description: Bad gateway

  /input:
    post:
      summary: Add input data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandlerInput'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '500':
          description: Internal server error
    get:
      summary: Get all inputs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HandlerInput'
        '500':
          description: Internal server error

  /input/{type}:
    get:
      summary: Get inputs by type
      parameters:
        - in: path
          name: type
          schema:
            type: string
          required: true
          description: Input type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HandlerInput'
        '500':
          description: Internal server error

  /dashboard:
    post:
      summary: Create a new dashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          description: Invalid request
        '500':
          description: Internal server error
    get:
      summary: Get all dashboards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dashboard'
        '500':
          description: Internal server error

  /dashboard/{id}:
    get:
      summary: Get a dashboard by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Dashboard ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '404':
          description: Dashboard not found
        '500':
          description: Internal server error
    put:
      summary: Update a dashboard
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Dashboard ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '500':
          description: Internal server error
    delete:
      summary: Delete a dashboard
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Dashboard ID
      responses:
        '200':
          description: OK
        '500':
          description: Internal server error

  /folder:
    post:
      summary: Create a new folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          description: Invalid request
        '500':
          description: Internal server error
    get:
      summary: Get all folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '500':
          description: Internal server error

  /folder/{id}:
    get:
      summary: Get a folder by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Folder ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '404':
          description: Folder not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a folder
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Folder ID
      responses:
        '200':
          description: OK
        '500':
          description: Internal server error

  /folder/{folderID}/dashboard/{dashboardID}:
    put:
      summary: Update a dashboard in a folder
      parameters:
        - in: path
          name: folderID
          schema:
            type: string
          required: true
          description: Folder ID
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: Dashboard ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '500':
          description: Internal server error

  /notification:
    post:
      summary: Send a notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: Invalid request

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time

    HandlerInput:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        data:
          type: object

    Dashboard:
      type: object
      properties:
        id:
          type: string
        data:
          type: string

    Folder:
      type: object
      properties:
        id:
          type: string
        dashboards:
          type: array
          items:
            $ref: '#/components/schemas/Dashboard'

    Notification:
      type: object
      properties:
        channel_level:
          type: string
        channel_name:
          type: string
        alert_on:
          type: string

    Network:
      type: object
      properties:
          id:
            type: string
          name:
            type: string
          network_address:
            type: string

    Script:
      type: object
      properties:
        filename:
          type: string
        script:
          type: string